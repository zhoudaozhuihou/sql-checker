from typing import Dict, Any, List
import requests
import json
from .base_model import SQLAnalyzerModel

class OllamaModel(SQLAnalyzerModel):
    """Ollama model implementation for SQL analysis"""
    
    def __init__(self, model_name: str = "deepseek-coder:6.7b", api_url: str = "http://localhost:11434"):
        self.model_name = model_name
        self.api_url = api_url
        
    def _query_ollama(self, prompt: str) -> str:
        """Send request to Ollama API"""
        try:
            response = requests.post(
                f"{self.api_url}/api/generate",
                json={
                    "model": self.model_name,
                    "prompt": prompt
                },
                stream=True
            )
            response.raise_for_status()
            full_response = ""
            for line in response.iter_lines():
                if line:
                    try:
                        json_response = json.loads(line)
                        full_response += json_response.get('response', '')
                    except json.JSONDecodeError:
                        continue
            return full_response
        except Exception as e:
            raise Exception(f"Ollama API call failed: {str(e)}")
    
    def analyze(self, sql_query: str) -> Dict[str, Any]:
        """Analyze SQL query and return analysis results"""
        # Combine all analysis into a single API call to reduce latency
        combined_prompt = self._get_combined_analysis_prompt(sql_query)
        
        try:
            response = self._query_ollama(combined_prompt)
            analysis_results = json.loads(response)
            
            safety_issues = analysis_results.get('safety_issues', [])
            performance_suggestions = analysis_results.get('performance_suggestions', [])
            risk_score = analysis_results.get('risk_score', 50)
            
            # Ensure risk_score is an integer between 0 and 100
            try:
                risk_score = int(risk_score)
                risk_score = max(0, min(100, risk_score))
            except:
                risk_score = 50  # Default medium risk
                
            return {
                "safety_issues": safety_issues,
                "performance_suggestions": performance_suggestions,
                "risk_score": risk_score,
                "risk_level": self.get_risk_level(risk_score),
                "details": "Generated by Ollama model analysis"
            }
        except Exception:
            # If combined analysis fails, fall back to individual analyses
            safety_issues = self.get_safety_issues(sql_query)
            performance_suggestions = self.get_performance_suggestions(sql_query)
            risk_score = self.calculate_risk_score(sql_query)
            
            return {
                "safety_issues": safety_issues,
                "performance_suggestions": performance_suggestions,
                "risk_score": risk_score,
                "risk_level": self.get_risk_level(risk_score),
                "details": "Generated by Ollama model analysis (fallback method)"
            }
    
    def _get_combined_analysis_prompt(self, sql_query: str) -> str:
        """Generate a combined prompt for all analyses to reduce API calls"""
        return f"""# SQL Analysis Task

As an expert SQL analyzer, please analyze the following SQL query comprehensively for safety issues, performance optimization opportunities, and overall risk assessment.

## SQL Query to Analyze:
```sql
{sql_query}
```

## Analysis Requirements:

1. Identify safety issues including SQL injection risks, permission problems, data leakage risks, comment risks, and other security concerns.
2. Provide performance optimization suggestions considering query structure, index usage, joins, data retrieval, filtering conditions, sorting/grouping, and data volume.
3. Calculate an overall risk score (0-100) based on data modification risk, permission risk, injection risk, performance risk, data leakage risk, and transaction risk.

## Response Format:
Please provide your analysis in the following JSON format:

```json
{{
  "safety_issues": [
    {{
      "issue": "Issue description",
      "severity": "high/medium/low",
      "recommendation": "Fix recommendation",
      "explanation": "Detailed explanation of the problem and potential consequences"
    }}
  ],
  "performance_suggestions": [
    {{
      "suggestion": "Optimization suggestion title",
      "impact": "high/medium/low",
      "recommendation": "Specific optimization method",
      "explanation": "Detailed explanation of why this optimization is needed and expected performance improvement"
    }}
  ],
  "risk_score": 50
}}
```

If no issues are found in any category, return an empty array for that category. The risk score should be an integer between 0-100, where:
- 0-29: Low risk (query is safe and efficient)
- 30-69: Medium risk (query may have some safety or performance issues)
- 70-100: High risk (query has serious safety or performance issues)

Ensure your response is valid JSON format with no additional text or explanation outside the JSON structure.
"""
    
    def get_safety_issues(self, sql_query: str) -> List[Dict[str, Any]]:
        prompt = f"""# SQL Safety Analysis

As a professional SQL security analyst, please analyze the following SQL query for security issues.

Consider the following aspects:
1. SQL injection risks: Check for string concatenation, non-parameterized queries, etc.
2. Permission issues: Check for high-risk operations like DROP, TRUNCATE, DELETE, UPDATE, GRANT, REVOKE, etc.
3. Data leakage risks: Check if sensitive data might be exposed
4. Comment risks: Check for comments that could be used for SQL injection
5. Other security concerns: Such as stored procedure execution, dynamic SQL, etc.

## SQL Query:
```sql
{sql_query}
```

Please return your analysis in the following JSON format:
[
  {{
    "issue": "Issue description",
    "severity": "high/medium/low",
    "recommendation": "Fix recommendation",
    "explanation": "Detailed explanation of the problem and potential consequences"
  }}
]

If no security issues are found, return an empty array []. Ensure your response is valid JSON format.
"""
        response = self._query_ollama(prompt)
        try:
            # Try to parse JSON response
            issues = json.loads(response)
            return issues if isinstance(issues, list) else []
        except:
            # Return error information if parsing fails
            return [{
                "issue": "Unable to parse Ollama's security analysis results",
                "severity": "high",
                "recommendation": "Please check if the Ollama service is running properly",
                "explanation": "The model returned a result that is not valid JSON format and cannot be further analyzed"
            }]
    
    def get_performance_suggestions(self, sql_query: str) -> List[Dict[str, Any]]:
        prompt = f"""# SQL Performance Analysis

As a senior SQL performance optimization expert, please analyze the following SQL query for performance issues and provide optimization suggestions.

Consider the following aspects:
1. Query structure: Check for unnecessary complex queries, subqueries, or temporary tables
2. Index usage: Analyze if the query can effectively use indexes, or if indexes need to be added
3. Table joins: Evaluate if JOIN operations are efficient, check for Cartesian product risks
4. Data retrieval: Check if SELECT * is used, or if unnecessary data is being retrieved
5. Filtering conditions: Analyze the efficiency of WHERE clauses, check for full table scan risks
6. Sorting and grouping: Evaluate the performance impact of ORDER BY and GROUP BY operations
7. Data volume: Consider the amount of data the query might process and its impact on performance

## SQL Query:
```sql
{sql_query}
```

Please return your analysis in the following JSON format:
[
  {{
    "suggestion": "Optimization suggestion title",
    "impact": "high/medium/low",
    "recommendation": "Specific optimization method",
    "explanation": "Detailed explanation of why this optimization is needed and expected performance improvement"
  }}
]

If no performance issues are found, return an empty array []. Ensure your response is valid JSON format.
"""
        response = self._query_ollama(prompt)
        try:
            # Try to parse JSON response
            suggestions = json.loads(response)
            return suggestions if isinstance(suggestions, list) else []
        except:
            # Return error information if parsing fails
            return [{
                "suggestion": "Unable to parse Ollama's performance suggestions",
                "impact": "medium",
                "recommendation": "Please check if the Ollama service is running properly",
                "explanation": "The model returned a result that is not valid JSON format and cannot be further analyzed"
            }]
    
    def calculate_risk_score(self, sql_query: str) -> int:
        prompt = f"""# SQL Risk Assessment

As an SQL risk assessment expert, please conduct a comprehensive risk assessment (0-100 points) for the following SQL query.

Consider the following risk factors:
1. Data modification risk: Assess if the query contains DROP, TRUNCATE, DELETE, UPDATE, etc. that could lead to data loss
2. Permission risk: Assess if the query contains GRANT, REVOKE, or other permission-related operations
3. Injection risk: Assess if the query has SQL injection vulnerabilities
4. Performance risk: Assess if the query might cause performance issues (such as full table scans, Cartesian products, etc.)
5. Data leakage risk: Assess if the query might lead to sensitive data exposure
6. Transaction risk: Assess the risk of the query in transactions

Risk score criteria:
- 0-29 points: Low risk, the query is safe and efficient
- 30-69 points: Medium risk, the query may have some safety or performance issues
- 70-100 points: High risk, the query has serious safety or performance issues

## SQL Query:
```sql
{sql_query}
```

After careful analysis, please return only an integer between 0 and 100 as the risk score. Do not include any other text or explanation.
"""
        response = self._query_ollama(prompt)
        try:
            # Try to convert the response to an integer
            score = int(response.strip())
            return max(0, min(100, score))  # Ensure the score is between 0-100
        except:
            # Return default score if conversion fails
            return 50  # Default medium risk